services:
  # MySQL database service to store application data
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: ticketing
    ports:
      - "3306:3306"
    volumes:
      # Initializes the database with a script
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      # Persists database files and logs using named volume
      - db-dataa:/var/lib/mysql
      - db-dataa:/var/log/mysql

  # Zookeeper service for Kafka coordination and metadata management
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000

  # Kafka broker to handle message publishing/subscribing
  kafka-broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    ports:
      - "9092:9092"      # External access
      - "29092:29092"    # Internal access
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Web-based UI for exploring Kafka topics, consumers, and producers
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8084:8080"
    depends_on:
      - kafka-broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'

  # Schema Registry for managing and validating Kafka message schemas
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    depends_on:
      - kafka-broker
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081

  # MySQL database service specifically for Keycloak
  keycloak-db:
    container_name: keycloak-mysql
    image: mysql:8.3.0
    volumes:
      # Persist MySQL data to avoid losing user/realm data across container restarts
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root       # Root password for MySQL
      MYSQL_DATABASE: keycloak        # Default database to be created for Keycloak
      MYSQL_USER: keycloak            # Custom user Keycloak will use to connect to the DB
      MYSQL_PASSWORD: password        # Password for the above user

  # Keycloak identity and access management service
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]  # Start in dev mode and import realms from mounted directory
    environment:
      DB_VENDOR: MYSQL                  # Specify the database type
      DB_ADDR: mysql                   # Should point to the DB host, but here it mistakenly points to `mysql` instead of `keycloak-db`
      DB_DATABASE: keycloak            # Database name to connect to
      DB_USER: keycloak                # DB user credentials (must match keycloak-db setup)
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin            # Default admin username
      KEYCLOAK_ADMIN_PASSWORD: admin   # Default admin password
    ports:
      - "8091:8080"                    # Map container's 8080 to host's 8091
    volumes:
      # Mount local directory to import realm definitions automatically at startup
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-db                    # Ensure database container is started before Keycloak

# Named volume for persisting MySQL data and logs
volumes:
  db-dataa: